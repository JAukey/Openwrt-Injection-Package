#!/bin/bash /etc/rc.common 
# Copyright (C) 2006 OpenWrt.org
START=99
section_enabled(){
	config_get_bool enabled "$1" 'enabled' 0
	[ $enabled -gt 0 ]
}
create_cache_server_file(){
	echo "proxy_cache_path  $1  levels=1:2   keys_zone=cache_one:5m inactive=10m max_size=5m;
    	server {
            listen       $2;
            server_name  localhost;
            location / {
                proxy_pass http://$3:$4;
		proxy_cache_valid  200 304 1h;
		proxy_cache_valid  301 302 1h;
		proxy_cache cache_one;
		proxy_cache_valid any 1d;
		expires      2d;	
	    }
    	}" > /tmp/cache_server.conf 
}
get_cache_config(){
	config_get_bool cache_enabled "cache" "cache_enabled"
	if [[ $cache_enabled -gt 0 ]];then
		config_get cache_local_port "cache" "cache_local_port"
		config_get cache_local_path "cache" "cache_local_path"
		config_get cache_server "cache" "cache_server"
		config_get cache_server_port "cache" "cache_server_port"
		config_get ngxconf "cache" "ngxconf"
		create_cache_server_file $cache_local_path $cache_local_port $cache_server $cache_server_port 
		
		sed -i '/cache_server.conf/d' $ngxconf
		sed -i '/http {/a\include /tmp/cache_server.conf;' $ngxconf
		/etc/init.d/nginx restart
 	fi
}
set_interfaces(){                                                                                        
    if [ -z "$2" ];then                                                                                  
        echo "The interface is empty!"                                                                   
    exit 0                                                                                               
    fi                                                                                                   
    OLD_IFS="$IFS"                                                                                       
    IFS=","                                                                                              
    local arr=($2)                                                                                       
    IFS="$OLD_IFS"                                                                                       
    for i in ${arr[@]}                                                                                   
    do                                                                                                   
        if [ -z "$(ifconfig $i 2>/dev/null)" ];then                                                      
            echo $(ifconfig $i 2>&1)                                                                     
            continue                                                                                     
        fi                                                                                               
        iptables -t nat -$1 PREROUTING $3 -i $i -j $4 -w
    done                                                                                                 
}
get_base_config(){
	config_get http_enabled "base" "http_enabled"
	config_get https_enabled "base" "https_enabled"
	config_get http_global "base" "http_global"
	config_get https_global "base" "https_global"
	
	config_get local_http_port "base" "local_http_port"
	config_get local_https_port "base" "local_https_port"
	config_get interfaces "base" "interfaces"
	
	config_load network
	config_get hostip "lan" "ipaddr" "192.168.1.1"
}
valid_ip(){
    local  ip=$1         
    local  stat=1
    local  ipRegular="^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$"
    if [ -z "$ip" ];then
        echo "The ip shouldn't be empty!"
        return 1                      
    else                          
       if [[ "$ip" =~ $ipRegular ]];then
           OIFS=$IFS                               
           IFS='.'
           ip=($ip)             
           IFS=$OIFS                           
           [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
           stat=$?                
       fi
    fi            
    if [ $stat -eq 1 ];then                                 
        echo "Wrong IP!"       
        return 1                                                     
    fi                                                               
   return $stat
}
normal_injection(){
	config_get domain "$1" domain
	config_get ip "$1" ip
	if [[ $2 -gt 0 && ! $3 -gt 0  ]];then
            valid_ip $ip
	    if [ $? -le 0 ];then
	        sed -i '/address=\/'$domain'/d' /etc/dnsmasq.conf	        	
	        sed -i '$a address=/'$domain'/'$ip'' /etc/dnsmasq.conf	        	
                iptables -t nat -A REDSOCKS -d $ip -p tcp -m tcp --dport $4 -j REDIRECT --to-port $5 -w
	    fi
        fi 
}
bypass_injection(){
	config_get domain "$1" domain
	config_get ip "$1" ip
        valid_ip $ip
	if [ $? -le 0 ];then
	    sed -i '/address=\/'$domain'/d' /etc/dnsmasq.conf	        	
	    sed -i '$a address=/'$domain'/'$ip'' /etc/dnsmasq.conf	        	
	    iptables -t nat -A REDSOCKS -d $ip -p tcp -m tcp --dport $2 -j ACCEPT -w	
	fi
}
start(){
	config_load injection
	section_enabled "base" || return 1
	get_base_config
	get_cache_config	
	                                                                                                                   
        iptables -t nat -N INJECTION -w                                                                                  
        iptables -t nat -N REDSOCKS -w  
        iptables -t nat -A INJECTION -d $hostip/32 -j ACCEPT 
        iptables -t nat -A INJECTION -m mark --mark 0x400/0x700 -j REDSOCKS -w 

        config_foreach bypass_injection http_domain_bypass 80
        config_foreach bypass_injection https_domain_bypass 443
	
	if [[ $http_global -gt 0 ]];then
	    iptables -t nat -A REDSOCKS -p tcp -m tcp --dport 80 -j REDIRECT --to-port $local_http_port -w
	fi	
	if [[ $https_global -gt 0 ]];then
	    iptables -t nat -A REDSOCKS -p tcp -m tcp --dport 443 -j REDIRECT --to-port $local_https_port -w
	fi	
	
	config_foreach normal_injection http_domain "$http_enabled"  "$http_global" 80 "$local_http_port" 
	config_foreach normal_injection https_domain "$https_enabled" "$https_global" 443 "$local_https_port"
	
	if [ $(uci get bashportal.base.enabled) != "1" ]
	then        
	    set_interfaces "I" "$interfaces" "1" "REDSOCKS"
	else
	    /etc/init.d/bashportal restart
	    while :
	    do
	    	a=$(/etc/init.d/bashportal status 2>/dev/null) 
            if [ "$a" != "" ]; then
	    	set_interfaces "I" "$interfaces" "1" "INJECTION"
            	break
            fi
            sleep 1
     	    done
	fi
	/etc/init.d/dnsmasq restart
}
stop(){ 
	config_load injection
	get_base_config
	config_get_bool cache_enabled "cache" "cache_enabled"
        
	iptables -t nat -F REDSOCKS -w                                                       
	iptables -t nat -F INJECTION -w                                                        
	if [ $(uci get bashportal.base.enabled) != "1" ]                
        then                                                            
	    set_interfaces "D" "$interfaces" "" "REDSOCKS"
        else                                                            
	    set_interfaces "D" "$interfaces" "" "INJECTION"
        fi                  
	iptables -t nat -X INJECTION -w                                                        
        iptables -t nat -X REDSOCKS -w                                                       
	sed -i '/address=/d' /etc/dnsmasq.conf
	/etc/init.d/dnsmasq restart
	config_get ngxconf "cache" "ngxconf"
	sed -i '/cache_server.conf/d' $ngxconf
	/etc/init.d/nginx restart
}
